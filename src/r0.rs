// Generated by rust-peg. Do not edit.
#![allow(non_snake_case_functions, unused_variable)]

fn slice_eq(input: &str, pos: uint, m: &str) -> Result<(uint, ()), uint> {
    #![inline]
    #![allow(dead_code)]
    let l = m.len();
    if input.len() >= pos + l &&
           input.as_bytes().slice(pos, pos + l) == m.as_bytes() {
        Ok((pos + l, ()))
    } else { Err(pos) }
}
fn any_char(input: &str, pos: uint) -> Result<(uint, ()), uint> {
    #![inline]
    #![allow(dead_code)]
    if input.len() > pos {
        Ok((input.char_range_at(pos).next, ()))
    } else { Err(pos) }
}
fn pos_to_line(input: &str, pos: uint) -> uint {
    let mut remaining = pos as int;
    let mut lineno: uint = 1;
    for line in input.lines() {
        remaining -= (line.len() as int) + 1;
        if remaining <= 0 { return lineno; }
        lineno += 1;
    }
    return lineno;
}
fn parse_def(input: &str, pos: uint) ->
 Result<(uint, (Vec<String>, ())), uint> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, pos, "(");
            match seq_res {
                Err(pos) => { Err(pos) }
                Ok((pos, _)) => {
                    {
                        let seq_res = slice_eq(input, pos, "define");
                        match seq_res {
                            Err(pos) => { Err(pos) }
                            Ok((pos, _)) => {
                                {
                                    let seq_res = slice_eq(input, pos, "(");
                                    match seq_res {
                                        Err(pos) => { Err(pos) }
                                        Ok((pos, _)) => {
                                            {
                                                let seq_res =
                                                    {
                                                        let mut repeat_pos =
                                                            pos;
                                                        let mut repeat_value =
                                                            vec!();
                                                        loop  {
                                                            let pos =
                                                                repeat_pos;
                                                            let step_res =
                                                                parse_var(input,
                                                                          pos);
                                                            match step_res {
                                                                Ok((newpos,
                                                                    value)) =>
                                                                {
                                                                    repeat_pos
                                                                        =
                                                                        newpos;
                                                                    repeat_value.push(value);
                                                                }
                                                                Err(..) => {
                                                                    break ;
                                                                }
                                                            }
                                                        }
                                                        if repeat_value.len()
                                                               >= 1u {
                                                            Ok((repeat_pos,
                                                                repeat_value))
                                                        } else {
                                                            Err(repeat_pos)
                                                        }
                                                    };
                                                match seq_res {
                                                    Err(pos) => { Err(pos) }
                                                    Ok((pos, vs)) => {
                                                        {
                                                            let seq_res =
                                                                slice_eq(input,
                                                                         pos,
                                                                         ")");
                                                            match seq_res {
                                                                Err(pos) => {
                                                                    Err(pos)
                                                                }
                                                                Ok((pos, _))
                                                                => {
                                                                    {
                                                                        let seq_res =
                                                                            parse_exp(input,
                                                                                      pos);
                                                                        match seq_res
                                                                            {
                                                                            Err(pos)
                                                                            =>
                                                                            {
                                                                                Err(pos)
                                                                            }
                                                                            Ok((pos,
                                                                                e))
                                                                            =>
                                                                            {
                                                                                {
                                                                                    let seq_res =
                                                                                        slice_eq(input,
                                                                                                 pos,
                                                                                                 ")");
                                                                                    match seq_res
                                                                                        {
                                                                                        Err(pos)
                                                                                        =>
                                                                                        {
                                                                                            Err(pos)
                                                                                        }
                                                                                        Ok((pos,
                                                                                            _))
                                                                                        =>
                                                                                        {
                                                                                            {
                                                                                                let match_str =
                                                                                                    input.slice(start_pos,
                                                                                                                pos);
                                                                                                Ok((pos,
                                                                                                    (vs,
                                                                                                     e)))
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_exp(input: &str, pos: uint) -> Result<(uint, ()), uint> {
    {
        let choice_res =
            {
                let start_pos = pos;
                {
                    let seq_res = parse_var(input, pos);
                    match seq_res {
                        Err(pos) => { Err(pos) }
                        Ok((pos, _)) => {
                            {
                                let match_str = input.slice(start_pos, pos);
                                Ok((pos, ()))
                            }
                        }
                    }
                }
            };
        match choice_res {
            Ok((pos, value)) => Ok((pos, value)),
            Err(..) => {
                let choice_res =
                    {
                        let start_pos = pos;
                        {
                            let seq_res = parse_con(input, pos);
                            match seq_res {
                                Err(pos) => { Err(pos) }
                                Ok((pos, _)) => {
                                    {
                                        let match_str =
                                            input.slice(start_pos, pos);
                                        Ok((pos, ()))
                                    }
                                }
                            }
                        }
                    };
                match choice_res {
                    Ok((pos, value)) => Ok((pos, value)),
                    Err(..) => {
                        let choice_res =
                            {
                                let seq_res = slice_eq(input, pos, "(");
                                match seq_res {
                                    Err(pos) => { Err(pos) }
                                    Ok((pos, _)) => {
                                        {
                                            let seq_res =
                                                parse_prm(input, pos);
                                            match seq_res {
                                                Err(pos) => { Err(pos) }
                                                Ok((pos, _)) => {
                                                    {
                                                        let seq_res =
                                                            {
                                                                let mut repeat_pos =
                                                                    pos;
                                                                let mut repeat_value =
                                                                    vec!();
                                                                loop  {
                                                                    let pos =
                                                                        repeat_pos;
                                                                    let step_res =
                                                                        parse_exp(input,
                                                                                  pos);
                                                                    match step_res
                                                                        {
                                                                        Ok((newpos,
                                                                            value))
                                                                        => {
                                                                            repeat_pos
                                                                                =
                                                                                newpos;
                                                                            repeat_value.push(value);
                                                                        }
                                                                        Err(..)
                                                                        => {
                                                                            break
                                                                                ;
                                                                        }
                                                                    }
                                                                }
                                                                if repeat_value.len()
                                                                       >= 1u {
                                                                    Ok((repeat_pos,
                                                                        ()))
                                                                } else {
                                                                    Err(repeat_pos)
                                                                }
                                                            };
                                                        match seq_res {
                                                            Err(pos) => {
                                                                Err(pos)
                                                            }
                                                            Ok((pos, _)) => {
                                                                slice_eq(input,
                                                                         pos,
                                                                         ")")
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            };
                        match choice_res {
                            Ok((pos, value)) => Ok((pos, value)),
                            Err(..) => {
                                let choice_res =
                                    {
                                        let seq_res =
                                            slice_eq(input, pos, "(");
                                        match seq_res {
                                            Err(pos) => { Err(pos) }
                                            Ok((pos, _)) => {
                                                {
                                                    let seq_res =
                                                        parse_var(input, pos);
                                                    match seq_res {
                                                        Err(pos) => {
                                                            Err(pos)
                                                        }
                                                        Ok((pos, _)) => {
                                                            {
                                                                let seq_res =
                                                                    {
                                                                        let mut repeat_pos =
                                                                            pos;
                                                                        let mut repeat_value =
                                                                            vec!();
                                                                        loop 
                                                                             {
                                                                            let pos =
                                                                                repeat_pos;
                                                                            let step_res =
                                                                                parse_exp(input,
                                                                                          pos);
                                                                            match step_res
                                                                                {
                                                                                Ok((newpos,
                                                                                    value))
                                                                                =>
                                                                                {
                                                                                    repeat_pos
                                                                                        =
                                                                                        newpos;
                                                                                    repeat_value.push(value);
                                                                                }
                                                                                Err(..)
                                                                                =>
                                                                                {
                                                                                    break
                                                                                        ;
                                                                                }
                                                                            }
                                                                        }
                                                                        if repeat_value.len()
                                                                               >=
                                                                               1u
                                                                           {
                                                                            Ok((repeat_pos,
                                                                                ()))
                                                                        } else {
                                                                            Err(repeat_pos)
                                                                        }
                                                                    };
                                                                match seq_res
                                                                    {
                                                                    Err(pos)
                                                                    => {
                                                                        Err(pos)
                                                                    }
                                                                    Ok((pos,
                                                                        _)) =>
                                                                    {
                                                                        slice_eq(input,
                                                                                 pos,
                                                                                 ")")
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    };
                                match choice_res {
                                    Ok((pos, value)) => Ok((pos, value)),
                                    Err(..) => {
                                        let choice_res =
                                            {
                                                let seq_res =
                                                    slice_eq(input, pos, "(");
                                                match seq_res {
                                                    Err(pos) => { Err(pos) }
                                                    Ok((pos, _)) => {
                                                        {
                                                            let seq_res =
                                                                slice_eq(input,
                                                                         pos,
                                                                         "cond");
                                                            match seq_res {
                                                                Err(pos) => {
                                                                    Err(pos)
                                                                }
                                                                Ok((pos, _))
                                                                => {
                                                                    {
                                                                        let seq_res =
                                                                            slice_eq(input,
                                                                                     pos,
                                                                                     "(");
                                                                        match seq_res
                                                                            {
                                                                            Err(pos)
                                                                            =>
                                                                            {
                                                                                Err(pos)
                                                                            }
                                                                            Ok((pos,
                                                                                _))
                                                                            =>
                                                                            {
                                                                                {
                                                                                    let seq_res =
                                                                                        {
                                                                                            let mut repeat_pos =
                                                                                                pos;
                                                                                            let mut repeat_value =
                                                                                                vec!();
                                                                                            loop 
                                                                                                 {
                                                                                                let pos =
                                                                                                    repeat_pos;
                                                                                                let step_res =
                                                                                                    {
                                                                                                        let seq_res =
                                                                                                            parse_exp(input,
                                                                                                                      pos);
                                                                                                        match seq_res
                                                                                                            {
                                                                                                            Err(pos)
                                                                                                            =>
                                                                                                            {
                                                                                                                Err(pos)
                                                                                                            }
                                                                                                            Ok((pos,
                                                                                                                _))
                                                                                                            =>
                                                                                                            {
                                                                                                                {
                                                                                                                    let seq_res =
                                                                                                                        parse_exp(input,
                                                                                                                                  pos);
                                                                                                                    match seq_res
                                                                                                                        {
                                                                                                                        Err(pos)
                                                                                                                        =>
                                                                                                                        {
                                                                                                                            Err(pos)
                                                                                                                        }
                                                                                                                        Ok((pos,
                                                                                                                            _))
                                                                                                                        =>
                                                                                                                        {
                                                                                                                            slice_eq(input,
                                                                                                                                     pos,
                                                                                                                                     ")")
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    };
                                                                                                match step_res
                                                                                                    {
                                                                                                    Ok((newpos,
                                                                                                        value))
                                                                                                    =>
                                                                                                    {
                                                                                                        repeat_pos
                                                                                                            =
                                                                                                            newpos;
                                                                                                        repeat_value.push(value);
                                                                                                    }
                                                                                                    Err(..)
                                                                                                    =>
                                                                                                    {
                                                                                                        break
                                                                                                            ;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            if repeat_value.len()
                                                                                                   >=
                                                                                                   1u
                                                                                               {
                                                                                                Ok((repeat_pos,
                                                                                                    ()))
                                                                                            } else {
                                                                                                Err(repeat_pos)
                                                                                            }
                                                                                        };
                                                                                    match seq_res
                                                                                        {
                                                                                        Err(pos)
                                                                                        =>
                                                                                        {
                                                                                            Err(pos)
                                                                                        }
                                                                                        Ok((pos,
                                                                                            _))
                                                                                        =>
                                                                                        {
                                                                                            slice_eq(input,
                                                                                                     pos,
                                                                                                     ")")
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            };
                                        match choice_res {
                                            Ok((pos, value)) =>
                                            Ok((pos, value)),
                                            Err(..) => {
                                                let seq_res =
                                                    slice_eq(input, pos, "(");
                                                match seq_res {
                                                    Err(pos) => { Err(pos) }
                                                    Ok((pos, _)) => {
                                                        {
                                                            let seq_res =
                                                                slice_eq(input,
                                                                         pos,
                                                                         "cond");
                                                            match seq_res {
                                                                Err(pos) => {
                                                                    Err(pos)
                                                                }
                                                                Ok((pos, _))
                                                                => {
                                                                    {
                                                                        let seq_res =
                                                                            slice_eq(input,
                                                                                     pos,
                                                                                     "(");
                                                                        match seq_res
                                                                            {
                                                                            Err(pos)
                                                                            =>
                                                                            {
                                                                                Err(pos)
                                                                            }
                                                                            Ok((pos,
                                                                                _))
                                                                            =>
                                                                            {
                                                                                {
                                                                                    let seq_res =
                                                                                        {
                                                                                            let mut repeat_pos =
                                                                                                pos;
                                                                                            let mut repeat_value =
                                                                                                vec!();
                                                                                            loop 
                                                                                                 {
                                                                                                let pos =
                                                                                                    repeat_pos;
                                                                                                let step_res =
                                                                                                    {
                                                                                                        let seq_res =
                                                                                                            parse_exp(input,
                                                                                                                      pos);
                                                                                                        match seq_res
                                                                                                            {
                                                                                                            Err(pos)
                                                                                                            =>
                                                                                                            {
                                                                                                                Err(pos)
                                                                                                            }
                                                                                                            Ok((pos,
                                                                                                                _))
                                                                                                            =>
                                                                                                            {
                                                                                                                {
                                                                                                                    let seq_res =
                                                                                                                        parse_exp(input,
                                                                                                                                  pos);
                                                                                                                    match seq_res
                                                                                                                        {
                                                                                                                        Err(pos)
                                                                                                                        =>
                                                                                                                        {
                                                                                                                            Err(pos)
                                                                                                                        }
                                                                                                                        Ok((pos,
                                                                                                                            _))
                                                                                                                        =>
                                                                                                                        {
                                                                                                                            slice_eq(input,
                                                                                                                                     pos,
                                                                                                                                     ")")
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    };
                                                                                                match step_res
                                                                                                    {
                                                                                                    Ok((newpos,
                                                                                                        value))
                                                                                                    =>
                                                                                                    {
                                                                                                        repeat_pos
                                                                                                            =
                                                                                                            newpos;
                                                                                                        repeat_value.push(value);
                                                                                                    }
                                                                                                    Err(..)
                                                                                                    =>
                                                                                                    {
                                                                                                        break
                                                                                                            ;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            if repeat_value.len()
                                                                                                   >=
                                                                                                   1u
                                                                                               {
                                                                                                Ok((repeat_pos,
                                                                                                    ()))
                                                                                            } else {
                                                                                                Err(repeat_pos)
                                                                                            }
                                                                                        };
                                                                                    match seq_res
                                                                                        {
                                                                                        Err(pos)
                                                                                        =>
                                                                                        {
                                                                                            Err(pos)
                                                                                        }
                                                                                        Ok((pos,
                                                                                            _))
                                                                                        =>
                                                                                        {
                                                                                            {
                                                                                                let seq_res =
                                                                                                    slice_eq(input,
                                                                                                             pos,
                                                                                                             "(");
                                                                                                match seq_res
                                                                                                    {
                                                                                                    Err(pos)
                                                                                                    =>
                                                                                                    {
                                                                                                        Err(pos)
                                                                                                    }
                                                                                                    Ok((pos,
                                                                                                        _))
                                                                                                    =>
                                                                                                    {
                                                                                                        {
                                                                                                            let seq_res =
                                                                                                                slice_eq(input,
                                                                                                                         pos,
                                                                                                                         "else");
                                                                                                            match seq_res
                                                                                                                {
                                                                                                                Err(pos)
                                                                                                                =>
                                                                                                                {
                                                                                                                    Err(pos)
                                                                                                                }
                                                                                                                Ok((pos,
                                                                                                                    _))
                                                                                                                =>
                                                                                                                {
                                                                                                                    {
                                                                                                                        let seq_res =
                                                                                                                            parse_exp(input,
                                                                                                                                      pos);
                                                                                                                        match seq_res
                                                                                                                            {
                                                                                                                            Err(pos)
                                                                                                                            =>
                                                                                                                            {
                                                                                                                                Err(pos)
                                                                                                                            }
                                                                                                                            Ok((pos,
                                                                                                                                _))
                                                                                                                            =>
                                                                                                                            {
                                                                                                                                {
                                                                                                                                    let seq_res =
                                                                                                                                        slice_eq(input,
                                                                                                                                                 pos,
                                                                                                                                                 ")");
                                                                                                                                    match seq_res
                                                                                                                                        {
                                                                                                                                        Err(pos)
                                                                                                                                        =>
                                                                                                                                        {
                                                                                                                                            Err(pos)
                                                                                                                                        }
                                                                                                                                        Ok((pos,
                                                                                                                                            _))
                                                                                                                                        =>
                                                                                                                                        {
                                                                                                                                            slice_eq(input,
                                                                                                                                                     pos,
                                                                                                                                                     ")")
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_var(input: &str, pos: uint) -> Result<(uint, String), uint> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let mut repeat_pos = pos;
                    let mut repeat_value = vec!();
                    loop  {
                        let pos = repeat_pos;
                        let step_res =
                            if input.len() > pos {
                                let ::std::str::CharRange { ch: ch, next: next
                                        } = input.char_range_at(pos);
                                match ch {
                                    'a' ..'z' => Ok((next, ())),
                                    _ => Err(pos),
                                }
                            } else { Err(pos) };
                        match step_res {
                            Ok((newpos, value)) => {
                                repeat_pos = newpos;
                                repeat_value.push(value);
                            }
                            Err(..) => { break ; }
                        }
                    }
                    if repeat_value.len() >= 1u {
                        Ok((repeat_pos, ()))
                    } else { Err(repeat_pos) }
                };
            match seq_res {
                Err(pos) => { Err(pos) }
                Ok((pos, _)) => {
                    {
                        let match_str = input.slice(start_pos, pos);
                        Ok((pos, match_str.to_string()))
                    }
                }
            }
        }
    }
}
fn parse_con(input: &str, pos: uint) -> Result<(uint, super::Obj), uint> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let mut repeat_pos = pos;
                    let mut repeat_value = vec!();
                    loop  {
                        let pos = repeat_pos;
                        let step_res =
                            if input.len() > pos {
                                let ::std::str::CharRange { ch: ch, next: next
                                        } = input.char_range_at(pos);
                                match ch {
                                    '0' ..'9' => Ok((next, ())),
                                    _ => Err(pos),
                                }
                            } else { Err(pos) };
                        match step_res {
                            Ok((newpos, value)) => {
                                repeat_pos = newpos;
                                repeat_value.push(value);
                            }
                            Err(..) => { break ; }
                        }
                    }
                    if repeat_value.len() >= 1u {
                        Ok((repeat_pos, ()))
                    } else { Err(repeat_pos) }
                };
            match seq_res {
                Err(pos) => { Err(pos) }
                Ok((pos, _)) => {
                    {
                        let match_str = input.slice(start_pos, pos);
                        Ok((pos,
                            super::OInt(from_str::<i32>(match_str).unwrap())))
                    }
                }
            }
        }
    }
}
fn parse_prm(input: &str, pos: uint) -> Result<(uint, String), uint> {
    {
        let choice_res =
            {
                let start_pos = pos;
                {
                    let seq_res = slice_eq(input, pos, "+");
                    match seq_res {
                        Err(pos) => { Err(pos) }
                        Ok((pos, _)) => {
                            {
                                let match_str = input.slice(start_pos, pos);
                                Ok((pos, match_str.to_string()))
                            }
                        }
                    }
                }
            };
        match choice_res {
            Ok((pos, value)) => Ok((pos, value)),
            Err(..) => {
                let choice_res =
                    {
                        let start_pos = pos;
                        {
                            let seq_res = slice_eq(input, pos, "-");
                            match seq_res {
                                Err(pos) => { Err(pos) }
                                Ok((pos, _)) => {
                                    {
                                        let match_str =
                                            input.slice(start_pos, pos);
                                        Ok((pos, match_str.to_string()))
                                    }
                                }
                            }
                        }
                    };
                match choice_res {
                    Ok((pos, value)) => Ok((pos, value)),
                    Err(..) => {
                        let choice_res =
                            {
                                let start_pos = pos;
                                {
                                    let seq_res = slice_eq(input, pos, "*");
                                    match seq_res {
                                        Err(pos) => { Err(pos) }
                                        Ok((pos, _)) => {
                                            {
                                                let match_str =
                                                    input.slice(start_pos,
                                                                pos);
                                                Ok((pos,
                                                    match_str.to_string()))
                                            }
                                        }
                                    }
                                }
                            };
                        match choice_res {
                            Ok((pos, value)) => Ok((pos, value)),
                            Err(..) => {
                                let start_pos = pos;
                                {
                                    let seq_res = slice_eq(input, pos, "/");
                                    match seq_res {
                                        Err(pos) => { Err(pos) }
                                        Ok((pos, _)) => {
                                            {
                                                let match_str =
                                                    input.slice(start_pos,
                                                                pos);
                                                Ok((pos,
                                                    match_str.to_string()))
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn def(input: &str) -> Result<(Vec<String>, ()), String> {
    match parse_def(input, 0) {
        Ok((pos, value)) => {
            if pos == input.len() {
                Ok(value)
            } else {
                Err(format!("Expected end of input at {}" , pos_to_line
                            ( input , pos )))
            }
        }
        Err(pos) => Err(format!("Error at {}" , pos_to_line ( input , pos ))),
    }
}
pub fn exp(input: &str) -> Result<(), String> {
    match parse_exp(input, 0) {
        Ok((pos, value)) => {
            if pos == input.len() {
                Ok(value)
            } else {
                Err(format!("Expected end of input at {}" , pos_to_line
                            ( input , pos )))
            }
        }
        Err(pos) => Err(format!("Error at {}" , pos_to_line ( input , pos ))),
    }
}
